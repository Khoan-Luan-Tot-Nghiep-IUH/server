{"version":3,"file":"static/js/17.01732088.chunk.js","mappings":"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","sources":["components/auth/Login.js"],"sourcesContent":["  import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useLoginMutation } from \"../../Redux/User/apiSlice\";\r\nimport { setCredentials } from \"../../Redux/User/userSlice\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport Notification from \"../shared/Notification/Notification\";\r\nimport { AiOutlineArrowLeft, AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\r\n\r\nconst Login = () => {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [login, { isLoading }] = useLoginMutation();\r\n  const [notificationOpen, setNotificationOpen] = useState(false);\r\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\r\n  const [notificationSeverity, setNotificationSeverity] = useState(\"success\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const from = location.state?.from || { pathname: \"/\" };\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    setErrorMessage(\"\");\r\n    try {\r\n      const userData = await login({ userName, password }).unwrap();\r\n      if (userData?.accessToken) {\r\n        const decodedUser = jwtDecode(userData.accessToken);\r\n        const userInfo = { ...decodedUser, token: userData.accessToken };\r\n        localStorage.setItem(\"user\", JSON.stringify(userInfo));\r\n        dispatch(setCredentials(userInfo));\r\n        showNotification(\"success\", \"Login successful!\");\r\n        navigate(from.pathname + from.search, { replace: true });\r\n      } else {\r\n        throw new Error(\"Token is missing or invalid.\");\r\n      }\r\n    } catch (err) {\r\n      const errorMsg = err?.data?.msg || \"Login failed. Please try again.\";\r\n      setErrorMessage(errorMsg);\r\n      showNotification(\"error\", errorMsg);\r\n    }\r\n  };\r\n\r\n  const handleSocialLoginSuccess = (token) => {\r\n    try {\r\n      const decodedUser = jwtDecode(token);\r\n      const userInfo = { ...decodedUser, token };\r\n      localStorage.setItem(\"user\", JSON.stringify(userInfo));\r\n      dispatch(setCredentials(userInfo));\r\n      navigate(from.pathname + from.search, { replace: true });\r\n      showNotification(\"success\", \"Social login successful!\");\r\n    } catch (error) {\r\n      setErrorMessage(\"Social login failed. Please try again.\");\r\n      showNotification(\"error\", \"Social login failed. Please try again.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n    const token = params.get(\"token\");\r\n    const from = params.get(\"from\") || \"/\";\r\n\r\n    if (token) {\r\n      handleSocialLoginSuccess(token);\r\n      navigate(from);\r\n    }\r\n  }, [location]);\r\n\r\n  const handleFacebookLogin = () => {\r\n    window.location.href = `${process.env.REACT_APP_API_URL}/api/user/facebook`;\r\n  };\r\n\r\n  const handleGoogleLogin = () => {\r\n    window.location.href = `${process.env.REACT_APP_API_URL}/api/user/google`;\r\n  };\r\n\r\n  const showNotification = (severity, message) => {\r\n    setNotificationSeverity(severity);\r\n    setNotificationMessage(message);\r\n    setNotificationOpen(true);\r\n  };\r\n\r\n  const handleNotificationClose = () => {\r\n    setNotificationOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-400\">\r\n      <div className=\"w-full max-w-5xl bg-white rounded-2xl shadow-lg overflow-hidden\">\r\n        <div className=\"flex flex-col md:flex-row\">\r\n          {/* Left Section */}\r\n          <div\r\n            className=\"md:w-1/2 hidden md:block bg-cover bg-center\"\r\n            style={{ backgroundImage: 'url(\"https://source.unsplash.com/random\")' }}\r\n          >\r\n            <div className=\"h-full w-full flex flex-col justify-center items-center bg-gradient-to-tr from-purple-600 to-blue-500\">\r\n              <h2 className=\"text-4xl font-bold text-white mb-4\">\r\n                Chào Mừng Trở Lại!\r\n              </h2>\r\n              <p className=\"text-white mb-8 text-center px-8\">\r\n                Đăng nhập để tiếp tục truy cập vào hệ thống của chúng tôi.\r\n              </p>\r\n              <button\r\n                className=\"bg-white text-blue-600 font-semibold py-2 px-6 rounded-full hover:bg-gray-100\"\r\n                onClick={() => navigate(\"/register\")}\r\n              >\r\n                Đăng Ký\r\n              </button>\r\n              <div className=\"mt-[150px] text-center\">\r\n              <button\r\n                onClick={() => navigate(-1)}\r\n                className=\"flex items-center text-white justify-center transition text-sm\"\r\n              >\r\n                <AiOutlineArrowLeft className=\"mr-2\" size={32} />\r\n                Quay lại\r\n              </button>\r\n            </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right Section */}\r\n          <div className=\"w-full md:w-1/2 p-8 sm:p-12\">\r\n            <h2 className=\"text-3xl font-semibold text-gray-800 mb-6\">\r\n              Đăng Nhập Tài Khoản\r\n            </h2>\r\n            <form onSubmit={handleLogin} className=\"space-y-5\">\r\n              <div>\r\n                <label className=\"block text-gray-700\">Tên Đăng Nhập</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Nhập tên đăng nhập\"\r\n                  value={userName}\r\n                  onChange={(e) => setUserName(e.target.value)}\r\n                  required\r\n                  className=\"w-full mt-2 px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none\"\r\n                />\r\n              </div>\r\n              <div className=\"relative\">\r\n            <label className=\"block text-gray-700\">Mật Khẩu</label>\r\n            <input\r\n              type={showPassword ? \"text\" : \"password\"} // Thay đổi type input\r\n              placeholder=\"Nhập mật khẩu\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              required\r\n              className=\"w-full mt-1 px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:outline-none\"\r\n            />\r\n            {/* Nút toggle mật khẩu */}\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setShowPassword(!showPassword)}\r\n              className=\"absolute right-3 top-[48px] transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none\"\r\n            >\r\n              {showPassword ? <AiOutlineEyeInvisible size={24} /> : <AiOutlineEye size={24} />}\r\n            </button>\r\n          </div>\r\n              {errorMessage && (\r\n                <p className=\"text-sm text-red-500\">{errorMessage}</p>\r\n              )}\r\n              <div className=\"flex items-center justify-between\">\r\n                <a\r\n                  href=\"/forgot-password\"\r\n                  className=\"text-sm text-blue-500 hover:underline\"\r\n                >\r\n                  Quên mật khẩu?\r\n                </a>\r\n                <a\r\n                  href=\"/register\"\r\n                  className=\"text-sm text-blue-500 hover:underline\"\r\n                >\r\n                  Đăng Ký Ngay\r\n                </a>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"w-full bg-blue-600 text-white py-3 rounded-md hover:bg-blue-700 transition duration-300\"\r\n              >\r\n                {isLoading ? \"Đang Đăng Nhập...\" : \"Đăng Nhập\"}\r\n              </button>\r\n            </form>\r\n            <div className=\"flex items-center my-6\">\r\n              <hr className=\"flex-grow border-gray-300\" />\r\n              <span className=\"mx-4 text-gray-400\">Hoặc</span>\r\n              <hr className=\"flex-grow border-gray-300\" />\r\n            </div>\r\n            <div className=\"flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4\">\r\n              <button\r\n                onClick={handleGoogleLogin}\r\n                className=\"flex items-center justify-center bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-semibold py-2 px-4 rounded-md shadow-sm w-full sm:w-auto\"\r\n              >\r\n                <img\r\n                  src=\"https://img.icons8.com/color/48/000000/google-logo.png\"\r\n                  alt=\"Google\"\r\n                  className=\"h-6 w-6 mr-2\"\r\n                />\r\n                Đăng nhập với Google\r\n              </button>\r\n              <button\r\n                onClick={handleFacebookLogin}\r\n                className=\"flex items-center justify-center bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-semibold py-2 px-4 rounded-md shadow-sm w-full sm:w-auto\"\r\n              >\r\n                <img\r\n                  src=\"https://img.icons8.com/color/48/000000/facebook-new.png\"\r\n                  alt=\"Facebook\"\r\n                  className=\"h-6 w-6 mr-2\"\r\n                />\r\n                Đăng nhập với Facebook\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Notification\r\n        open={notificationOpen}\r\n        onClose={handleNotificationClose}\r\n        severity={notificationSeverity}\r\n        message={notificationMessage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["Login","_location$state","userName","setUserName","useState","password","setPassword","errorMessage","setErrorMessage","dispatch","useDispatch","navigate","useNavigate","location","useLocation","login","isLoading","useLoginMutation","notificationOpen","setNotificationOpen","notificationMessage","setNotificationMessage","notificationSeverity","setNotificationSeverity","showPassword","setShowPassword","from","state","pathname","handleSocialLoginSuccess","token","userInfo","jwtDecode","localStorage","setItem","JSON","stringify","setCredentials","search","replace","showNotification","error","useEffect","params","URLSearchParams","get","severity","message","_jsxs","className","children","_jsx","style","backgroundImage","onClick","AiOutlineArrowLeft","size","onSubmit","async","e","preventDefault","userData","unwrap","accessToken","Error","err","_err$data","errorMsg","data","msg","type","placeholder","value","onChange","target","required","AiOutlineEyeInvisible","AiOutlineEye","href","handleGoogleLogin","window","src","alt","handleFacebookLogin","Notification","open","onClose","handleNotificationClose"],"sourceRoot":""}