{"version":3,"file":"static/js/15.336eae65.chunk.js","mappings":"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","sources":["components/home/components/SearchResult/Trip/TripCard.js","components/home/components/SearchResult/SearchResults.js","utils/formatUtils.js"],"sourcesContent":["import React from 'react';\r\nimport { formatCurrency } from 'utils/formatUtils';\r\n\r\nconst TripCard = ({ trip }) => (\r\n  <div className=\"border p-4 rounded-lg shadow-md bg-white transition hover:shadow-lg flex justify-between items-center mb-4 hover:scale-105 transform transition-transform duration-300 ease-in-out\">\r\n    {/* Hình ảnh và thông tin bên trái */}\r\n    <div className=\"flex items-center\">\r\n      {/* Hình ảnh */}\r\n      <div className=\"relative flex-shrink-0\">\r\n        <img\r\n          src=\"https://static.vexere.com/production/images/1702527338553.jpeg?w=250&h=250\"\r\n          alt=\"Bus type\"\r\n          className=\"w-24 h-24 object-cover rounded-md\"\r\n        />\r\n        <div className=\"absolute top-1 left-1 bg-green-500 text-white text-xs px-2 py-1 rounded-lg\">\r\n          Xác nhận tức thì\r\n        </div>\r\n      </div>\r\n\r\n      {/* Thông tin chuyến đi */}\r\n      <div className=\"ml-6\">\r\n        <h3 className=\"text-lg font-semibold text-blue-600\">{trip.busType.name}</h3>\r\n        <p className=\"text-sm text-gray-500 mb-1\">Limousine {trip.busType.seats} chỗ</p>\r\n\r\n        <div className=\"flex items-center text-sm text-gray-700 mb-2\">\r\n          <p className=\"mr-4\">\r\n            <span className=\"font-semibold\">Giờ đi: </span>{new Date(trip.departureTime).toLocaleTimeString()}\r\n          </p>\r\n          <p>\r\n            <span className=\"font-semibold\">Giờ đến: </span>{new Date(trip.arrivalTime).toLocaleTimeString()}\r\n          </p>\r\n        </div>\r\n        <p className=\"text-sm mb-1\">\r\n          <span className=\"font-semibold\">Nơi đi: </span>{trip.departureLocation.name}\r\n        </p>\r\n        <p className=\"text-sm mb-1\">\r\n          <span className=\"font-semibold\">Nơi đến: </span>{trip.arrivalLocation.name}\r\n        </p>\r\n        <p className=\"text-sm text-green-600 font-semibold\">\r\n          Còn {trip.availableSeats} chỗ trống\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n    {/* Phần giá và nút */}\r\n    <div className=\"text-right\">\r\n      <div className=\"mb-2\">\r\n        <span className=\"text-xl font-bold text-blue-600\">\r\n          Từ {formatCurrency(trip.basePrice)} VND\r\n        </span>\r\n      </div>\r\n      {trip.discount && (\r\n        <div className=\"text-green-500 text-sm mb-2\">Giảm {trip.discount}%</div>\r\n      )}\r\n      <button className=\"bg-yellow-500 text-white py-2 px-4 rounded-md hover:bg-yellow-600 transition duration-300 text-lg\">\r\n        Chọn chuyến\r\n      </button>\r\n      <p className=\"text-xs text-gray-500 mt-2\">KHÔNG CẦN THANH TOÁN TRƯỚC</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default TripCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useSearchTripQuery } from '../../../../Redux/Trip/TripApiSlice';\r\nimport TripCard from '../SearchResult/Trip/TripCard';\r\nimport SkeletonLoader from '../../../shared/Loader/Loader';\r\n\r\nconst SearchResults = ({ filters }) => {\r\n  const { state } = useLocation();\r\n  const {\r\n    departureLocation,\r\n    arrivalLocation,\r\n    departureDate,\r\n    returnDate,\r\n    ticketCount,\r\n  } = state || {};\r\n\r\n  const [filteredTrips, setFilteredTrips] = useState([]);\r\n  const [allTrips, setAllTrips] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const { data: trips, error, isLoading } = useSearchTripQuery({\r\n    departureLocation,\r\n    arrivalLocation,\r\n    departureDate,\r\n    returnDate,\r\n    ticketCount,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (trips?.data?.departureTrips) {\r\n      setAllTrips(trips.data.departureTrips);\r\n      setFilteredTrips(trips.data.departureTrips);\r\n    }\r\n  }, [trips]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n\r\n    const delayDebounceFn = setTimeout(() => {\r\n      const applyFilters = () => {\r\n        let filtered = [...allTrips];\r\n\r\n        if (filters.priceRange === 'low') {\r\n          filtered = filtered.filter(trip => trip.basePrice < 200000);\r\n        } else if (filters.priceRange === 'medium') {\r\n          filtered = filtered.filter(trip => trip.basePrice >= 200000 && trip.basePrice <= 500000);\r\n        } else if (filters.priceRange === 'high') {\r\n          filtered = filtered.filter(trip => trip.basePrice > 500000);\r\n        }\r\n\r\n        if (filters.busOperator) {\r\n          filtered = filtered.filter(trip => trip.busType?.name === filters.busOperator);\r\n        }\r\n\r\n        if (filters.departureTimeRange === 'morning') {\r\n          filtered = filtered.filter(trip => {\r\n            const hour = new Date(trip.departureTime).getHours();\r\n            return hour >= 6 && hour < 12;\r\n          });\r\n        } else if (filters.departureTimeRange === 'afternoon') {\r\n          filtered = filtered.filter(trip => {\r\n            const hour = new Date(trip.departureTime).getHours();\r\n            return hour >= 12 && hour < 18;\r\n          });\r\n        }\r\n\r\n        // Sắp xếp chuyến đi\r\n        if (filters.sort === 'priceAsc') {\r\n          filtered.sort((a, b) => a.basePrice - b.basePrice); // Sắp xếp giá tăng dần\r\n        } else if (filters.sort === 'priceDesc') {\r\n          filtered.sort((a, b) => b.basePrice - a.basePrice); // Sắp xếp giá giảm dần\r\n        } else if (filters.sort === 'earliest') {\r\n          filtered.sort((a, b) => new Date(a.departureTime) - new Date(b.departureTime)); // Sắp xếp giờ đi sớm nhất\r\n        } else if (filters.sort === 'latest') {\r\n          filtered.sort((a, b) => new Date(b.departureTime) - new Date(a.departureTime)); // Sắp xếp giờ đi muộn nhất\r\n        }\r\n\r\n        setFilteredTrips(filtered); // Cập nhật danh sách sau khi lọc và sắp xếp\r\n        setLoading(false); // Tắt trạng thái loading khi kết thúc\r\n      };\r\n\r\n      applyFilters(); // Gọi hàm lọc sau thời gian delay\r\n    }, 500); // Thêm độ trễ 500ms\r\n\r\n    return () => clearTimeout(delayDebounceFn); // Xóa timeout nếu component bị unmount\r\n  }, [filters, allTrips]);\r\n\r\n  // Hiển thị loading\r\n  if (loading || isLoading) {\r\n    return (\r\n      <div className=\"container mx-auto py-8\">\r\n        <SkeletonLoader /> {/* Giả sử bạn có component SkeletonLoader */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) return <div>Không tìm thấy chuyến xe. Lỗi: {error.message}</div>;\r\n\r\n  // Nếu không có chuyến đi phù hợp sau khi lọc và sắp xếp\r\n  if (filteredTrips.length === 0) {\r\n    return <div>Không tìm thấy chuyến xe nào phù hợp với yêu cầu tìm kiếm của bạn.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-8\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Kết quả tìm kiếm chuyến xe</h2>\r\n\r\n      <div className=\"space-y-4\">\r\n        {filteredTrips.map((trip) => (\r\n          <TripCard key={trip._id} trip={trip} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import moment from 'moment-timezone';\r\n\r\nconst VN_TIMEZONE = 'Asia/Ho_Chi_Minh';\r\n\r\nexport const timeUtils = {\r\n  parseUTCTimeForForm: (utcTimeString) => {\r\n    if (!utcTimeString) return new Date();\r\n    return new Date(utcTimeString);\r\n  },\r\n\r\n  formatTimeForServer: (localDate) => {\r\n    if (!localDate) return null;\r\n    return moment(localDate).utc().format();\r\n  },\r\n\r\n  formatDisplayTime: (utcTimeString) => {\r\n    if (!utcTimeString) return '';\r\n    return moment(utcTimeString).tz(VN_TIMEZONE).format('DD/MM/YYYY HH:mm');\r\n  }\r\n};\r\nexport const formatCurrency = (value) => {\r\n  if (!value) return '0 VND';\r\n  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);\r\n};\r\n"],"names":["_ref","trip","_jsxs","className","children","_jsx","src","alt","busType","name","seats","Date","departureTime","toLocaleTimeString","arrivalTime","departureLocation","arrivalLocation","availableSeats","formatCurrency","basePrice","discount","filters","state","useLocation","departureDate","returnDate","ticketCount","filteredTrips","setFilteredTrips","useState","allTrips","setAllTrips","loading","setLoading","data","trips","error","isLoading","useSearchTripQuery","useEffect","_trips$data","departureTrips","delayDebounceFn","setTimeout","applyFilters","filtered","priceRange","filter","busOperator","_trip$busType","departureTimeRange","hour","getHours","sort","a","b","clearTimeout","SkeletonLoader","message","length","map","TripCard","_id","timeUtils","parseUTCTimeForForm","utcTimeString","formatTimeForServer","localDate","moment","utc","format","formatDisplayTime","tz","value","Intl","NumberFormat","style","currency"],"sourceRoot":""}