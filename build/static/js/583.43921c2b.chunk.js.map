{"version":3,"file":"static/js/583.43921c2b.chunk.js","mappings":"4OAKA,MAsGA,EAtGoBA,KAClB,MAAQC,KAAMC,EAAS,UAAEC,EAAS,QAAEC,IAAYC,EAAAA,EAAAA,MAG1CC,EAAU,CACd,CACEC,MAAO,iCACPC,UAAW,WACXC,IAAK,WACLC,OAASC,IAASC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEH,KAErD,CACEJ,MAAO,QACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,aACPC,UAAW,SACXC,IAAK,SACLC,OAASK,IACP,IAAIC,EAAmB,eAAXD,EAA0B,UAAuB,iBAAXA,EAA4B,QAAU,OACxF,OAAOH,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACD,MAAOA,EAAMF,SAAEC,EAAOG,eAAoB,GAG1D,CACEX,MAAO,6CACPC,UAAW,YACXC,IAAK,YACLC,OAASS,GAAeA,EAAYC,IAAOD,GAAWE,OAAO,oBAAsB,sCAErF,CACEd,MAAO,qBACPC,UAAW,WACXC,IAAK,WACLC,OAASY,IACPV,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACD,MAAOM,EAAW,QAAU,MAAMR,SACpCQ,EAAW,2BAAc,4BAIhC,CACEf,MAAO,yBACPE,IAAK,SACLC,OAASa,IACPC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,KAAK,SAAQZ,SAAA,EAClBF,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,KAAK,UAAUC,QAASA,IAAMC,EAAeP,GAAQT,SAAC,cAG9DF,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACI,QAAM,EAACF,QAASA,IAAMG,EAAmBT,GAAQT,SACtDS,EAAOD,SAAW,yBAAgB,2BAOvCQ,EAAkBG,IAEtBC,QAAQC,IAAI,+CAAyBF,EAAK,EAGtCD,EAAqBI,UACzB,IAEEF,QAAQC,IAAI,iEAAmCF,EACjD,CAAE,MAAOI,GACPH,QAAQG,MAAM,2DAAkCA,EAClD,GAQF,OALAC,EAAAA,EAAAA,YAAU,KAERlC,GAAS,GACR,CAACA,KAGFoB,EAAAA,EAAAA,MAAA,OAAKX,UAAU,6DAA4DC,SAAA,EACzEU,EAAAA,EAAAA,MAAA,OAAKX,UAAU,yCAAwCC,SAAA,EACrDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,qBAAoBC,SAAC,6CACnCF,EAAAA,EAAAA,KAACe,EAAAA,GAAM,CAACC,KAAK,UAAUC,QAASzB,EAAQU,SAAC,uCAK1CX,GACCS,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wCAAuCC,UACpDF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAI,CAACb,KAAK,aAGbd,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK,CACJlC,QAASA,EACTmC,WAAYC,MAAMC,QAAiB,OAATzC,QAAS,IAATA,OAAS,EAATA,EAAW0C,OAAS1C,EAAU0C,MAAQ,GAChEC,OAAStB,GAAWA,EAAOuB,IAC3BjC,UAAU,gDACVkC,WAAY,CAAEC,SAAU,QAGxB,C","sources":["components/SuperAdmin/navSideBar/ManageUsers.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Table, Button, Tag, Space, Spin } from 'antd';\r\nimport { useGetAllUsersByLastLoginQuery } from '../../../Redux/User/apiSlice'; // Chỉnh đường dẫn nếu cần\r\nimport moment from 'moment';\r\n\r\nconst ManageUsers = () => {\r\n  const { data: usersData, isLoading, refetch } = useGetAllUsersByLastLoginQuery();\r\n\r\n  // Định nghĩa các cột cho bảng người dùng\r\n  const columns = [\r\n    {\r\n      title: 'Tên người dùng',\r\n      dataIndex: 'userName',\r\n      key: 'userName',\r\n      render: (text) => <span className=\"font-semibold\">{text}</span>,\r\n    },\r\n    {\r\n      title: 'Email',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n    },\r\n    {\r\n      title: 'Vai trò',\r\n      dataIndex: 'roleId',\r\n      key: 'roleId',\r\n      render: (roleId) => {\r\n        let color = roleId === 'superadmin' ? 'volcano' : roleId === 'companyadmin' ? 'green' : 'blue';\r\n        return <Tag color={color}>{roleId.toUpperCase()}</Tag>;\r\n      },\r\n    },\r\n    {\r\n      title: 'Ngày đăng nhập cuối',\r\n      dataIndex: 'lastLogin',\r\n      key: 'lastLogin',\r\n      render: (lastLogin) => (lastLogin ? moment(lastLogin).format('DD-MM-YYYY HH:mm') : 'Chưa đăng nhập'),\r\n    },\r\n    {\r\n      title: 'Trạng thái',\r\n      dataIndex: 'isActive',\r\n      key: 'isActive',\r\n      render: (isActive) => (\r\n        <Tag color={isActive ? 'green' : 'red'}>\r\n          {isActive ? 'Hoạt động' : 'Vô hiệu hóa'}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Hành động',\r\n      key: 'action',\r\n      render: (record) => (\r\n        <Space size=\"middle\">\r\n          <Button type=\"primary\" onClick={() => handleEditUser(record)}>\r\n            Sửa\r\n          </Button>\r\n          <Button danger onClick={() => handleToggleStatus(record)}>\r\n            {record.isActive ? 'Vô hiệu hóa' : 'Kích hoạt'}\r\n          </Button>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleEditUser = (user) => {\r\n    // Logic mở modal hoặc điều hướng đến trang chỉnh sửa người dùng\r\n    console.log('Chỉnh sửa người dùng:', user);\r\n  };\r\n\r\n  const handleToggleStatus = async (user) => {\r\n    try {\r\n      // Gọi API để cập nhật trạng thái của người dùng\r\n      console.log('Thay đổi trạng thái người dùng:', user);\r\n    } catch (error) {\r\n      console.error('Không thể thay đổi trạng thái:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Hàm refetch để cập nhật lại dữ liệu\r\n    refetch();\r\n  }, [refetch]);\r\n\r\n  return (\r\n    <div className=\"p-6 bg-gradient-to-r from-blue-50 to-blue-100 min-h-screen\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h2 className=\"text-3xl font-bold\">Quản lý người dùng</h2>\r\n        <Button type=\"primary\" onClick={refetch}>\r\n          Cập nhật danh sách\r\n        </Button>\r\n      </div>\r\n      \r\n      {isLoading ? (\r\n        <div className=\"flex justify-center items-center h-64\">\r\n          <Spin size=\"large\" />\r\n        </div>\r\n      ) : (\r\n        <Table \r\n          columns={columns} \r\n          dataSource={Array.isArray(usersData?.users) ? usersData.users : []} \r\n          rowKey={(record) => record._id} \r\n          className=\"bg-white shadow-lg rounded-lg overflow-hidden\"\r\n          pagination={{ pageSize: 10 }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageUsers;\r\n"],"names":["ManageUsers","data","usersData","isLoading","refetch","useGetAllUsersByLastLoginQuery","columns","title","dataIndex","key","render","text","_jsx","className","children","roleId","color","Tag","toUpperCase","lastLogin","moment","format","isActive","record","_jsxs","Space","size","Button","type","onClick","handleEditUser","danger","handleToggleStatus","user","console","log","async","error","useEffect","Spin","Table","dataSource","Array","isArray","users","rowKey","_id","pagination","pageSize"],"sourceRoot":""}