{"version":3,"file":"static/js/345.3de4865c.chunk.js","mappings":"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","sources":["components/CompanyAdmin/components/ManageBus/BusTypeForm.js","components/CompanyAdmin/components/ManageBus/BusTypeList.js","components/CompanyAdmin/pages/ManageBuses.js","components/shared/Notification/Notification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useCreateBusTypeMutation, useUpdateBusTypeMutation } from '../../../../Redux/Bustype/BusTypeApiSlice';\r\n\r\nconst BusTypeForm = ({ busType, closeDrawer }) => {\r\n  const [createBusType] = useCreateBusTypeMutation();\r\n  const [updateBusType] = useUpdateBusTypeMutation();\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    seats: 40,\r\n    floorCount: 1,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (busType) {\r\n      setFormData({\r\n        name: busType.name,\r\n        description: busType.description || '',\r\n        seats: busType.seats,\r\n        floorCount: busType.floorCount || 1,\r\n      });\r\n    }\r\n  }, [busType]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      if (busType) {\r\n        await updateBusType({ id: busType._id, updatedBusType: formData }).unwrap();\r\n        closeDrawer(`Cập nhật loại xe \"${formData.name}\" thành công!`);\r\n      } else {\r\n        await createBusType(formData).unwrap();\r\n        closeDrawer(`Thêm loại xe \"${formData.name}\" thành công!`);\r\n      }\r\n    } catch (err) {\r\n      closeDrawer(`Lỗi khi lưu loại xe: ${err.message}`, 'error');\r\n      console.error('Lỗi khi lưu loại xe:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-sm font-medium text-gray-700\">Tên Loại Xe:</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={formData.name}\r\n          onChange={handleChange}\r\n          className=\"mt-2 p-2 border rounded w-full\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-sm font-medium text-gray-700\">Mô Tả:</label>\r\n        <textarea\r\n          name=\"description\"\r\n          value={formData.description}\r\n          onChange={handleChange}\r\n          className=\"mt-2 p-2 border rounded w-full\"\r\n        />\r\n      </div>\r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-sm font-medium text-gray-700\">Số Ghế:</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"seats\"\r\n          value={formData.seats}\r\n          onChange={handleChange}\r\n          className=\"mt-2 p-2 border rounded w-full\"\r\n          min=\"1\"\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"mb-6\">\r\n        <label className=\"block text-sm font-medium text-gray-700\">Số Tầng:</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"floorCount\"\r\n          value={formData.floorCount}\r\n          onChange={handleChange}\r\n          className=\"mt-2 p-2 border rounded w-full\"\r\n          min=\"1\"\r\n        />\r\n      </div>\r\n      <button type=\"submit\" className=\"bg-green-500 text-white px-4 py-2 rounded w-full\">\r\n        {busType ? 'Cập Nhật Loại Xe' : 'Thêm Loại Xe'}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BusTypeForm;\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useGetBusTypesQuery, useDeleteBusTypeMutation } from '../../../../Redux/Bustype/BusTypeApiSlice';\r\nimport { Drawer, Button, Table, Popconfirm } from 'antd';\r\nimport BusTypeForm from './BusTypeForm';\r\nimport Notification from '../../../../components/shared/Notification/Notification'\r\n\r\nconst BusTypeList = () => {\r\n  const companyId = useSelector((state) => state.user?.userInfo?.companyId);\r\n  const { data: response, isLoading, error, refetch } = useGetBusTypesQuery({ companyId });\r\n\r\n  const busTypes = response?.data || [];\r\n  const [deleteBusType] = useDeleteBusTypeMutation(); // Mutation cho việc xóa loại xe\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const [selectedBusType, setSelectedBusType] = useState(null); // Lưu trữ loại xe được chọn khi chỉnh sửa\r\n  const [notification, setNotification] = useState({ open: false, severity: 'info', message: '' });\r\n\r\n  if (isLoading) return <p>Đang tải dữ liệu...</p>;\r\n  if (error) return <p>Lỗi khi tải dữ liệu: {error.message}</p>;\r\n\r\n  // Hàm mở Drawer và đặt form vào chế độ thêm mới\r\n  const showDrawer = () => {\r\n    setSelectedBusType(null);\r\n    setDrawerVisible(true);\r\n  };\r\n\r\n  // Hàm đóng Drawer và hiển thị thông báo sau khi cập nhật\r\n  const closeDrawer = (successMessage) => {\r\n    setDrawerVisible(false);\r\n    if (successMessage) {\r\n      setNotification({ open: true, severity: 'success', message: successMessage });\r\n      refetch(); // Lấy lại danh sách sau khi thêm hoặc cập nhật\r\n    }\r\n  };\r\n\r\n  // Hàm chỉnh sửa loại xe\r\n  const handleEdit = (busType) => {\r\n    setSelectedBusType(busType);\r\n    setDrawerVisible(true);\r\n  };\r\n\r\n  // Hàm xóa loại xe\r\n  const handleDelete = async (busTypeId) => {\r\n    try {\r\n      await deleteBusType(busTypeId).unwrap();\r\n      setNotification({ open: true, severity: 'success', message: 'Xóa loại xe thành công!' });\r\n      refetch(); // Lấy lại danh sách sau khi xóa\r\n    } catch (error) {\r\n      setNotification({ open: true, severity: 'error', message: `Lỗi khi xóa loại xe: ${error.message}` });\r\n    }\r\n  };\r\n\r\n  // Cấu hình các cột cho bảng loại xe\r\n  const columns = [\r\n    {\r\n      title: 'Tên Loại Xe',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Mô Tả',\r\n      dataIndex: 'description',\r\n      key: 'description',\r\n    },\r\n    {\r\n      title: 'Số Ghế',\r\n      dataIndex: 'seats',\r\n      key: 'seats',\r\n    },\r\n    {\r\n      title: 'Số Tầng',\r\n      dataIndex: 'floorCount',\r\n      key: 'floorCount',\r\n    },\r\n    {\r\n      title: 'Thao Tác',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <span>\r\n          <Button type=\"link\" onClick={() => handleEdit(record)}>\r\n            Sửa\r\n          </Button>\r\n          <Popconfirm\r\n            title=\"Bạn có chắc chắn muốn xóa loại xe này không?\"\r\n            onConfirm={() => handleDelete(record._id)} // Xác nhận xóa\r\n            okText=\"Có\"\r\n            cancelText=\"Không\"\r\n          >\r\n            <Button type=\"link\" danger>\r\n              Xóa\r\n            </Button>\r\n          </Popconfirm>\r\n        </span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-6\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h1 className=\"text-3xl font-bold text-gray-700\">Danh Sách Các Loại Xe</h1>\r\n          <Button type=\"primary\" onClick={showDrawer}>\r\n            Thêm Loại Xe Mới\r\n          </Button>\r\n        </div>\r\n\r\n        <Table dataSource={busTypes} columns={columns} rowKey=\"_id\" pagination={false} />\r\n\r\n        <Drawer\r\n          title={selectedBusType ? 'Chỉnh Sửa Loại Xe' : 'Thêm Loại Xe Mới'}\r\n          width={500}\r\n          onClose={() => closeDrawer()}\r\n          visible={drawerVisible}\r\n          destroyOnClose\r\n        >\r\n          <BusTypeForm busType={selectedBusType} closeDrawer={(successMessage) => closeDrawer(successMessage)} />\r\n        </Drawer>\r\n      </div>\r\n\r\n      {/* Hiển thị thông báo */}\r\n      <Notification\r\n        open={notification.open}\r\n        severity={notification.severity}\r\n        message={notification.message}\r\n        onClose={() => setNotification({ ...notification, open: false })}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BusTypeList;\r\n","import React from 'react';\r\nimport BusTypeList from '../components/ManageBus/BusTypeList';\r\n\r\nconst ManageBuses = () => {\r\n  return (\r\n    <div className=\"p-8\">\r\n      <BusTypeList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageBuses;\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport Slide from '@mui/material/Slide';\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst Notification = ({ open, onClose, severity, message, autoHideDuration = 3000, TransitionComponent = Slide }) => {\r\n  return (\r\n    <Snackbar\r\n      open={open}\r\n      autoHideDuration={autoHideDuration}\r\n      onClose={onClose}\r\n      TransitionComponent={TransitionComponent}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }} \r\n    >\r\n      <Alert onClose={onClose} severity={severity} sx={{ width: '100%' }}>\r\n        {message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\nexport default Notification;\r\n"],"names":["_ref","busType","closeDrawer","createBusType","useCreateBusTypeMutation","updateBusType","useUpdateBusTypeMutation","formData","setFormData","useState","name","description","seats","floorCount","useEffect","handleChange","e","value","target","_jsxs","onSubmit","async","preventDefault","id","_id","updatedBusType","unwrap","err","message","console","error","children","className","_jsx","type","onChange","required","min","BusTypeList","companyId","useSelector","state","_state$user","_state$user$userInfo","user","userInfo","data","response","isLoading","refetch","useGetBusTypesQuery","busTypes","deleteBusType","useDeleteBusTypeMutation","drawerVisible","setDrawerVisible","selectedBusType","setSelectedBusType","notification","setNotification","open","severity","successMessage","columns","title","dataIndex","key","render","text","record","Button","onClick","Popconfirm","onConfirm","busTypeId","handleDelete","okText","cancelText","danger","_Fragment","showDrawer","Table","dataSource","rowKey","pagination","Drawer","width","onClose","visible","destroyOnClose","BusTypeForm","Notification","ManageBuses","Alert","React","props","ref","MuiAlert","elevation","variant","autoHideDuration","TransitionComponent","Slide","Snackbar","anchorOrigin","vertical","horizontal","sx"],"sourceRoot":""}